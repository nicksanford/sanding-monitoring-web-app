diff --git a/Makefile b/Makefile
index e8ea9a9..95d38a8 100644
--- a/Makefile
+++ b/Makefile
@@ -1,6 +1,6 @@
 .PHONY: create update upload build
 
-VERSION := 1.0.11
+VERSION := 1.0.7
 MODULE_NAME := sanding-monitoring-web-app
 ORG_PUBLIC_NAMESPACE := ncs
 
diff --git a/src/App.tsx b/src/App.tsx
index 1e2259a..2cbf87c 100644
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -1,4 +1,4 @@
-import { useEffect, useState, useCallback } from 'react';
+import { useEffect, useState } from 'react';
 import * as VIAM from "@viamrobotics/sdk";
 import AppInterface from './AppInterface';
 import Cookies from "js-cookie";
@@ -18,7 +18,7 @@ function App() {
   const [viamClient, setViamClient] = useState<VIAM.ViamClient | null>(null);
   const [robotClient, setRobotClient] = useState<VIAM.RobotClient | null>(null);
   const [fetchTimestamp, setFetchTimestamp] = useState<Date | null>(null);
-  const [loadingPasses, setLoadingPasses] = useState<Set<string>>(new Set());
+  const [loadingPasses] = useState<Set<string>>(new Set());
 
   const machineNameMatch = window.location.pathname.match(machineNameRegex);
   const machineName = machineNameMatch ? machineNameMatch[1] : null;
@@ -170,6 +170,8 @@ function App() {
       const processedPasses: Pass[] = tabularData.map((item: any) => {
         const pass = item.data!.readings!;
         
+        const buildInfo = pass.build_info ? {...pass.build_info} : {};
+                
         return {
           start: new Date(pass.start),
           end: new Date(pass.end),
@@ -181,9 +183,11 @@ function App() {
           })): [],
           success: pass.success ?? true,
           pass_id: pass.pass_id,
-          err_string: pass.err_string || null
+          err_string: pass.err_string || null,
+          build_info: buildInfo
         };
       });
+      
       setPassSummaries(processedPasses);
       console.log("Fetching data end");
     };
diff --git a/src/AppInterface.css b/src/AppInterface.css
index faa8d2a..5105400 100644
--- a/src/AppInterface.css
+++ b/src/AppInterface.css
@@ -549,7 +549,7 @@ button:focus {
 }
 
 .expanded-content td {
-  padding: 0;
+  padding: 0 12px;
   border-bottom: 1px solid #e4e4e7;
 }
 
@@ -567,7 +567,7 @@ button:focus {
 .passes-container {
   display: flex;
   flex-direction: column;
-  padding: 4px;
+  padding: 4px 0;
   gap: 1rem;
 }
 
@@ -580,7 +580,11 @@ button:focus {
 }
 
 .pass-files-section {
-  margin: 0 5px;
+  margin: 0;
+}
+
+.pass-files-section h4 {
+  margin: 0 0 8px 2px;
 }
 
 .steps-grid {
@@ -1099,13 +1103,172 @@ button:focus {
 }
 
 .no-files-message, .no-videos-message {
-  grid-: 1 / -1;
+  grid-column: 1 / -1;
   text-align: center;
   padding: 0.25rem 0 0;
   color: #9ca3af;
   font-size: 12px;
 }
 
-.no-files-message {
-  text-align: left;
+.build-info-notice {
+  font-size: 12px;
+  color: #6b7280;
+  padding: 4px 0;
+}
+
+/* Build Info Styles */
+.build-info-section {
+  margin: 12px 0 12px 2px;
+  padding: 0;
+}
+
+.build-info-section h4 {
+  margin: 0 0 8px;
+  font-size: 14px;
+  font-weight: 600;
+  color: #374151;
+}
+
+.build-info-grid {
+  display: flex;
+  flex-wrap: wrap;
+  align-items: flex-start;
+  gap: 8px;
+}
+
+.build-info-item {
+  display: flex;
+  flex-direction: column;
+  gap: 6px;
+  margin-right: 16px;
+  margin-bottom: 0px;
+}
+
+.build-info-label {
+  font-size: 11px;
+  font-weight: 500;
+  color: #9ca3af;
+  letter-spacing: 0.025em;
+}
+
+.build-info-value {
+  font-size: 12px;
+  color: #1f2937;
+  font-family: ui-monospace, SFMono-Regular, "SF Mono", Monaco, Inconsolata, "Roboto Mono", Consolas, "Liberation Mono", Menlo, monospace;
+  padding: 4px 8px;
+  border-radius: 4px;
+  border: 1px solid #d1d5db;
+  display: inline-block;
+  word-break: break-all;
+  font-weight: 500;
+}
+
+/* Error message styling */
+.error-message {
+  background-color: #fef2f2;
+  border: 1px solid #fecaca;
+  border-radius: 6px;
+  padding: 12px;
+  margin: 8px 0;
+}
+
+.error-message-text {
+  font-size: 12px;
+  color: #dc2626;
+  line-height: 1.4;
+  word-wrap: break-word;
+}
+
+/* Pass ID styling */
+.pass-id {
+  font-family: ui-monospace, SFMono-Regular, "SF Mono", Monaco, Inconsolata, "Roboto Mono", Consolas, "Liberation Mono", Menlo, monospace;
+  font-size: 11px;
+  color: #6b7280;
+  background-color: #f3f4f6;
+  padding: 2px 6px;
+  border-radius: 4px;
+  word-break: break-all;
+}
+
+/* Day Summary Styles */
+.day-summary-header {
+  background-color: #f8fafc;
+}
+
+.day-summary-header td {
+  padding: 10px 20px;
+  font-weight: 600;
+}
+
+.day-summary-content {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+  width: 100%;
+  gap: 32px;
+}
+
+.day-summary-date {
+  font-size: 18px;
+  font-weight: 700;
+  color: #1e293b;
+}
+
+.day-summary-stats {
+  display: flex;
+  gap: 32px;
+  align-items: center;
+}
+
+.day-summary-item {
+  display: flex;
+  flex-direction: column;
+  align-items: center;
+  text-align: center;
+  padding: 8px 12px;
+  background: rgba(255, 255, 255, 0.7);
+  border-radius: 8px;
+  border: 1px solid rgba(203, 213, 225, 0.5);
+  min-width: 80px;
+  transition: all 0.2s ease;
+}
+
+.day-summary-item:hover {
+  background: rgba(255, 255, 255, 0.9);
+  transform: translateY(-1px);
+  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
+}
+
+.day-summary-label {
+  font-size: 10px;
+  color: #64748b;
+  font-weight: 600;
+  text-transform: uppercase;
+  letter-spacing: 0.08em;
+  margin-bottom: 4px;
+  line-height: 1.2;
+}
+
+.day-summary-value {
+  font-size: 16px;
+  color: #0f172a;
+  font-weight: 700;
+  font-family: ui-monospace, SFMono-Regular, "SF Mono", Monaco, Inconsolata, "Roboto Mono", Consolas, "Liberation Mono", Menlo, monospace;
+  line-height: 1.1;
+}
+
+/* Special styling for execution percentage */
+.day-summary-item:last-child .day-summary-value {
+  color: #059669;
+}
+
+/* Add some spacing between day groups */
+.day-summary-header + .expandable-row {
+  border-top: none;
+}
+
+/* Ensure proper spacing after each day group */
+.expandable-row:last-of-type,
+.expanded-content:last-of-type {
+  margin-bottom: 8px;
 }
\ No newline at end of file
diff --git a/src/AppInterface.tsx b/src/AppInterface.tsx
index 7b243be..8249363 100644
--- a/src/AppInterface.tsx
+++ b/src/AppInterface.tsx
@@ -1,4 +1,4 @@
-import React, { useState, useEffect, useMemo, useCallback } from 'react';
+import React, { useState } from 'react';
 import * as VIAM from "@viamrobotics/sdk";
 import './AppInterface.css';
 import StepVideosGrid from './StepVideosGrid';
@@ -33,26 +33,47 @@ export interface Pass {
   success: boolean;
   pass_id: string;
   err_string?: string | null;
+  build_info?: {
+    version?: string;
+    git_revision?: string;
+    date_compiled?: string;
+  };
 }
 
 const AppInterface: React.FC<AppViewProps> = ({ 
   machineName,
   viamClient,
   passSummaries = [],
-  files, 
   videoFiles,
   robotClient,
   fetchVideos,
   fetchTimestamp,
 }) => {
   const [activeRoute, setActiveRoute] = useState('live');
-  const [expandedRows, setExpandedRows] = useState<Set<number>>(new Set());
+  const [expandedRows, setExpandedRows] = useState<Set<string>>(new Set());
   const [videoStoreClient, setVideoStoreClient] = useState<VIAM.GenericComponentClient | null>(null);
 
   const activeTabStyle = "bg-blue-600 text-white";
   const inactiveTabStyle = "bg-gray-200 text-gray-700 hover:bg-gray-300";
 
-  const toggleRowExpansion = (index: number) => {
+  const groupedPasses = passSummaries.reduce((acc: Record<string, Pass[]>, pass) => {
+    const dateKey = pass.start.toLocaleDateString([], { year: 'numeric', month: 'long', day: 'numeric' });
+    if (!acc[dateKey]) {
+      acc[dateKey] = [];
+    }
+    acc[dateKey].push(pass);
+    return acc;
+  }, {});
+
+  // Helper function to format duration from milliseconds
+  const formatDurationMs = (ms: number): string => {
+    const totalSeconds = Math.floor(ms / 1000);
+    const minutes = Math.floor(totalSeconds / 60);
+    const seconds = totalSeconds % 60;
+    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
+  };
+
+  const toggleRowExpansion = (index: string) => {
     const newExpandedRows = new Set(expandedRows);
     const isExpanding = !newExpandedRows.has(index);
 
@@ -147,290 +168,200 @@ const AppInterface: React.FC<AppViewProps> = ({
                   </tr>
                 </thead>
                 <tbody>
-                  {passSummaries.map((pass: Pass, index: number) => (
-                    <React.Fragment key={pass.pass_id || index}>
-                      <tr 
-                        className="expandable-row"
-                        onClick={() => toggleRowExpansion(index)}
-                        role="button"
-                        tabIndex={0}
-                        onKeyDown={(e) => {
-                          if (e.key === 'Enter' || e.key === ' ') {
-                            e.preventDefault();
-                            toggleRowExpansion(index);
-                          }
-                        }}
-                        aria-expanded={expandedRows.has(index)}
-                        aria-label={`${expandedRows.has(index) ? 'Collapse' : 'Expand'} details for pass from ${pass.start.toLocaleTimeString()}`}
-                      >
-                        <td>
-                          <span className={`expand-icon ${expandedRows.has(index) ? 'expanded' : ''}`} aria-hidden="true">
-                            â–¶
-                          </span>
-                        </td>
-                        <td className="text-zinc-700">{pass.start.toLocaleDateString()}</td>
-                        <td className="text-zinc-700 text-xs">
-                          {pass.pass_id ? (
-                            <button
-                              onClick={() => navigator.clipboard.writeText(pass.pass_id)}
-                              className="hover:bg-blue-100 hover:text-blue-700 px-1 py-0.5 rounded cursor-pointer transition-colors"
-                              title={`Click to copy full pass ID: ${pass.pass_id}`}
-                            >
-                              {pass.pass_id.substring(0, 8)}
-                            </button>
-                          ) : (
-                            'â€”'
-                          )}
-                        </td>
-                        <td>{getStatusBadge(pass.success)}</td>
-                        <td className="text-zinc-700">{pass.start.toLocaleTimeString()}</td>
-                        <td className="text-zinc-700">{pass.end.toLocaleTimeString()}</td>
-                        <td className="text-zinc-700">{formatDurationToMinutesSeconds(pass.start, pass.end)}</td>
-                        <td className="text-zinc-700">
-                          {pass.steps ? `${pass.steps.length} steps` : 'â€”'}
-                        </td>
-                        <td className="text-zinc-700">
-                          {pass.err_string ? (
-                            <span className="text-red-600 text-xxs font-mono error-text" title={pass.err_string}>
-                              {pass.err_string}
-                            </span>
-                          ) : (
-                            <span className="text-gray-600">â€”</span>
-                          )}
-                        </td>
-                      </tr>
-                      {expandedRows.has(index) && (
-                        <tr className="expanded-content">
-                          <td colSpan={9}>
-                            <div className="pass-details">
-                              <div className="passes-container">
-                                <div className="steps-grid">
-                                  {pass.steps.map((step: Step) => {
-                                      const stepVideos = getStepVideos(step);
+                  {Object.entries(groupedPasses).map(([date, passes], dayIndex) => {
+                    // Calculate totals for this day
+                    let totalExecutionTime = 0;
+                    let totalOtherStepsTime = 0;
+                    let totalPassCount = passes.length;
 
-                                      return (
-                                        <div key={step.name} className="step-card">
-                                          <div className="step-name">{step.name}</div>
-                                          <div className="step-timeline">
-                                            <div className="step-time">
-                                              <span className="time-label">Start</span>
-                                              <span className="time-value">{step.start.toLocaleTimeString()}</span>
-                                            </div>
-                                            <div className="timeline-arrow">â†’</div>
-                                            <div className="step-time">
-                                              <span className="time-label">End</span>
-                                              <span className="time-value">{step.end.toLocaleTimeString()}</span>
-                                            </div>
-                                          </div>
-                                          <div className="step-duration">{formatDurationToMinutesSeconds(step.start, step.end)}</div>
-                                          
-                                          <StepVideosGrid
-                                            step={step}
-                                            stepVideos={stepVideos}
-                                            videoFiles={videoFiles}
-                                            fetchTimestamp={fetchTimestamp}
-                                            videoStoreClient={videoStoreClient}
-                                            viamClient={viamClient}
-                                            fetchVideos={fetchVideos}
-                                          />
-                                        </div>
-                                      );
-                                  })}
-                                </div>
-                              
-                                {/* New section for all files in pass time range */}
-                                {(() => {
-                                  const passStart = new Date(pass.start);
-                                  const passEnd = new Date(pass.end);
-                                  
-                                  // Always include files that fall within the pass time range (this includes .pcd files)
-                                  const passTimeRangeFileIDS: string[] = [];
-                                  files.forEach((file, binaryDataId) => {
-                                    if (file.metadata?.timeRequested) {
-                                      const fileTime = file.metadata.timeRequested.toDate();
-                                      if (fileTime >= passStart && fileTime <= passEnd) {
-                                        passTimeRangeFileIDS.push(binaryDataId);
-                                      }
-                                    }
-                                  });
-                                  
+                    passes.forEach(pass => {
+                      pass.steps.forEach(step => {
+                        const stepDuration = step.end.getTime() - step.start.getTime();
+                        
+                        // More precise execution step detection
+                        if (step.name.toLowerCase() === 'executing') {
+                          totalExecutionTime += stepDuration;
+                        } else {
+                          totalOtherStepsTime += stepDuration;
+                        }
+                      });
+                    });
 
-                                  // Additionally include pass-specific files if pass_id is not blank
-                                  const passFileIDs: string[] = [];
-                                  if (pass.pass_id && pass.pass_id.trim() !== '') {
-                                    files.forEach((file, binaryDataId) => {
-                                      if (file.metadata?.fileName && file.metadata.fileName.split("/").filter((y) => y == pass.pass_id).length > 0) {
-                                        passFileIDs.push(binaryDataId);
-                                      }
-                                    });
-                                  }
-                                  
+                    const totalStepsTime = totalExecutionTime + totalOtherStepsTime;
+                    const executionPercentage = totalStepsTime > 0 ? (totalExecutionTime / totalStepsTime) * 100 : 0;
 
-                                  const ids = new Set([...passFileIDs, ...passTimeRangeFileIDS]);
-                                  const passFiles = Array.from(files.values()).filter((x) => ids.has(x.metadata!.binaryDataId)).sort((a, b) => {
-                                    const timeA = a.metadata!.timeRequested!.toDate().getTime();
-                                    const timeB = b.metadata!.timeRequested!.toDate().getTime();
-                                    return timeA - timeB;
-                                  })
-
-                                  // Determine if we are in a loading state for this specific row.
-                                  const isLoading = fetchTimestamp && fetchTimestamp > pass.start;
-
-                                  // Show a loading indicator inside the expanded row while fetching files for this pass.
-                                  if (isLoading && passFiles.length === 0) {
-                                    return (
-                                      <div className="pass-files-section" style={{
-                                        display: 'flex',
-                                        flexDirection: 'column',
-                                        alignItems: 'center',
-                                        justifyContent: 'center',
-                                        padding: '20px',
-                                        minHeight: '100px',
-                                      }}>
-                                        <span style={{ 
-                                          display: 'inline-block',
-                                          width: '28px',
-                                          height: '28px',
-                                          border: '3px solid rgba(59, 130, 246, 0.2)',
-                                          borderTopColor: '#3b82f6',
-                                          borderRadius: '50%',
-                                          animation: 'spin 1s linear infinite'
-                                        }}></span>
-                                        <p style={{ marginTop: '12px', color: '#6b7280', fontSize: '14px' }}>
-                                          Loading files...
-                                        </p>
-                                      </div>
-                                    );
+                    return (
+                      <React.Fragment key={date}>
+                        <tr className="day-summary-header">
+                          <td colSpan={9}>
+                            <div className="day-summary-content">
+                              <div className="day-summary-date">{date}</div>
+                              <div className="day-summary-stats">
+                                <div className="day-summary-item">
+                                  <span className="day-summary-label">Total Passes</span>
+                                  <span className="day-summary-value">{totalPassCount}</span>
+                                </div>
+                                <div className="day-summary-item">
+                                  <span className="day-summary-label">Execution Time</span>
+                                  <span className="day-summary-value">{formatDurationMs(totalExecutionTime)}</span>
+                                </div>
+                                <div className="day-summary-item">
+                                  <span className="day-summary-label">Other Steps Time</span>
+                                  <span className="day-summary-value">{formatDurationMs(totalOtherStepsTime)}</span>
+                                </div>
+                                <div className="day-summary-item">
+                                  <span className="day-summary-label">Execution %</span>
+                                  <span className="day-summary-value">{executionPercentage.toFixed(1)}%</span>
+                                </div>
+                              </div>
+                            </div>
+                          </td>
+                        </tr>
+                        {passes.map((pass: Pass, passIndex: number) => {
+                          // Create unique index for each pass across all days
+                          const globalIndex = `${dayIndex}-${passIndex}`;
+                          
+                          return (
+                            <React.Fragment key={pass.pass_id || globalIndex}>
+                              <tr 
+                                className="expandable-row"
+                                onClick={() => toggleRowExpansion(globalIndex)}
+                                role="button"
+                                tabIndex={0}
+                                onKeyDown={(e) => {
+                                  if (e.key === 'Enter' || e.key === ' ') {
+                                    e.preventDefault();
+                                    toggleRowExpansion(globalIndex);
                                   }
-
-                                  return (
-                                    <div className="pass-files-section">
-                                      <h4>
-                                        Files captured during this pass
-                                      </h4>
-                                      
-                                      {passFiles.length > 0 && (
-                                        <div style={{ 
-                                          display: 'flex',
-                                          flexWrap: 'wrap',
-                                          gap: '8px',
-                                          overflowY: 'auto',
-                                          padding: '4px',
-                                        }}>
-                                          {passFiles.map((file, fileIndex) => {
-                                            const fileName = file.metadata?.fileName?.split('/').pop() || 'Unknown file';
+                                }}
+                                aria-expanded={expandedRows.has(globalIndex)}
+                                aria-label={`${expandedRows.has(globalIndex) ? 'Collapse' : 'Expand'} details for pass from ${pass.start.toLocaleTimeString()}`}
+                              >
+                                <td>
+                                  <span className={`expand-icon ${expandedRows.has(globalIndex) ? 'expanded' : ''}`} aria-hidden="true">
+                                    â–¶
+                                  </span>
+                                </td>
+                                <td className="text-zinc-700">{pass.start.toLocaleDateString()}</td>
+                                <td className="text-zinc-700 text-xs">
+                                  {pass.pass_id ? (
+                                    <button
+                                      onClick={() => navigator.clipboard.writeText(pass.pass_id)}
+                                      className="hover:bg-blue-100 hover:text-blue-700 px-1 py-0.5 rounded cursor-pointer transition-colors"
+                                      title={`Click to copy full pass ID: ${pass.pass_id}`}
+                                    >
+                                      {pass.pass_id.substring(0, 8)}
+                                    </button>
+                                  ) : (
+                                    'â€”'
+                                  )}
+                                </td>
+                                <td>{getStatusBadge(pass.success)}</td>
+                                <td className="text-zinc-700">{pass.start.toLocaleTimeString()}</td>
+                                <td className="text-zinc-700">{pass.end.toLocaleTimeString()}</td>
+                                <td className="text-zinc-700">{formatDurationToMinutesSeconds(pass.start, pass.end)}</td>
+                                <td className="text-zinc-700">
+                                  {pass.steps ? `${pass.steps.length} steps` : 'â€”'}
+                                </td>
+                                <td className="text-zinc-700">
+                                  {pass.err_string ? (
+                                    <span className="text-red-600 text-xxs font-mono error-text" title={pass.err_string}>
+                                      {pass.err_string}
+                                    </span>
+                                  ) : (
+                                    <span className="text-gray-600">â€”</span>
+                                  )}
+                                </td>
+                              </tr>
+                              {expandedRows.has(globalIndex) && (
+                                <tr className="expanded-content">
+                                  <td colSpan={9}>
+                                    <div className="pass-details">
+                                      <div className="build-info-section">
+                                        <h4>Build information</h4>
+                                        {pass.build_info && (pass.build_info.version || pass.build_info.git_revision || pass.build_info.date_compiled) ? (
+                                          <div className="build-info-grid">
+                                            {/* Version */}
+                                            {pass.build_info.version && (
+                                              <div className="build-info-item">
+                                                <span className="build-info-label">Version</span>
+                                                <span className="build-info-value">{pass.build_info.version}</span>
+                                              </div>
+                                            )}
                                             
-                                            return (
-                                              <div 
-                                                key={fileIndex}
-                                                style={{
-                                                  display: 'flex',
-                                                  alignItems: 'center',
-                                                  justifyContent: 'space-between',
-                                                  padding: '8px 12px',
-                                                  backgroundColor: '#f9fafb',
-                                                  border: '1px solid #e5e7eb',
-                                                  borderRadius: '6px',
-                                                  fontSize: '13px',
-                                                  cursor: 'pointer',
-                                                  transition: 'all 0.2s ease',
-                                                  flex: '1 0 calc(50% - 8px)',
-                                                  minWidth: '280px',
-                                                  maxWidth: 'calc(50% - 8px)',
-                                                  boxSizing: 'border-box'
-                                                }}
-                                                onMouseEnter={(e) => {
-                                                  e.currentTarget.style.backgroundColor = '#e5e7eb';
-                                                  e.currentTarget.style.transform = 'translateY(-1px)';
-                                                }}
-                                                onMouseLeave={(e) => {
-                                                  e.currentTarget.style.backgroundColor = '#f9fafb';
-                                                  e.currentTarget.style.transform = 'translateY(0)';
-                                                }}
-                                              >
-                                                <div style={{ 
-                                                  display: 'flex', 
-                                                  alignItems: 'center', 
-                                                  gap: '8px',
-                                                  flex: 1, 
-                                                  minWidth: 0,
-                                                  overflow: 'hidden'
-                                                }}>
-                                                  <span style={{ 
-                                                    color: '#374151',
-                                                    textOverflow: 'ellipsis',
-                                                    overflow: 'hidden',
-                                                    whiteSpace: 'nowrap',
-                                                    flex: 1
-                                                  }} title={fileName}>
-                                                    {fileName}
-                                                  </span>
-                                                  <span style={{ 
-                                                    color: '#9ca3af', 
-                                                    fontSize: '12px',
-                                                    whiteSpace: 'nowrap',
-                                                    flexShrink: 0
-                                                  }}>
-                                                    {file.metadata?.timeRequested?.toDate().toLocaleTimeString() || ''}
-                                                  </span>
-                                                </div>
-                                                <a 
-                                                  href={file.metadata?.uri}
-                                                  download={file.metadata?.fileName?.split('/').pop() || 'download'}
-                                                  style={{
-                                                    marginLeft: '12px',
-                                                    padding: '4px 12px',
-                                                    backgroundColor: '#3b82f6',
-                                                    color: 'white',
-                                                    borderRadius: '4px',
-                                                    textDecoration: 'none',
-                                                    fontSize: '12px',
-                                                    whiteSpace: 'nowrap',
-                                                    transition: 'background-color 0.2s',
-                                                    flexShrink: 0,
-                                                    cursor: 'pointer',
-                                                    display: 'inline-block'
-                                                  }}
-                                                  onClick={(e) => {
-                                                    e.stopPropagation();
-                                                  }}
-                                                  onMouseEnter={(e) => {
-                                                    e.currentTarget.style.backgroundColor = '#2563eb';
-                                                  }}
-                                                  onMouseLeave={(e) => {
-                                                    e.currentTarget.style.backgroundColor = '#3b82f6';
-                                                  }}
-                                                >
-                                                  Download
-                                                </a>
+                                            {/* Git Revision */}
+                                            {pass.build_info.git_revision && (
+                                              <div className="build-info-item">
+                                                <span className="build-info-label">Git revision</span>
+                                                <span className="build-info-value">{pass.build_info.git_revision}</span>
+                                              </div>
+                                            )}
+                                            
+                                            {/* Date Compiled */}
+                                            {pass.build_info.date_compiled && (
+                                              <div className="build-info-item">
+                                                <span className="build-info-label">Date compiled</span>
+                                                <span className="build-info-value">{pass.build_info.date_compiled}</span>
                                               </div>
-                                            );
+                                            )}
+                                          </div>
+                                        ) : (
+                                          <div className="build-info-notice">
+                                            Build information not available for this run.
+                                          </div>
+                                        )}
+                                      </div>
+                                      <div className="passes-container">
+                                        <div className="steps-grid">
+                                          {pass.steps.map((step: Step) => {
+                                              const stepVideos = getStepVideos(step);
+
+                                              return (
+                                                <div key={step.name} className="step-card">
+                                                  <div className="step-name">{step.name}</div>
+                                                  <div className="step-timeline">
+                                                    <div className="step-time">
+                                                      <span className="time-label">Start</span>
+                                                      <span className="time-value">{step.start.toLocaleTimeString()}</span>
+                                                    </div>
+                                                    <div className="timeline-arrow">â†’</div>
+                                                    <div className="step-time">
+                                                      <span className="time-label">End</span>
+                                                      <span className="time-value">{step.end.toLocaleTimeString()}</span>
+                                                    </div>
+                                                  </div>
+                                                  <div className="step-duration">{formatDurationToMinutesSeconds(step.start, step.end)}</div>
+                                                  
+                                                  <StepVideosGrid
+                                                    step={step}
+                                                    stepVideos={stepVideos}
+                                                    videoFiles={videoFiles}
+                                                    fetchTimestamp={fetchTimestamp}
+                                                    videoStoreClient={videoStoreClient}
+                                                    viamClient={viamClient}
+                                                    fetchVideos={fetchVideos}
+                                                  />
+                                                </div>
+                                              );
                                           })}
                                         </div>
-                                      )}
-                                      
-                                      {/* Show message if no files are found in the current view */}
-                                      {passFiles.length === 0 && !isLoading && (
-                                        <p>
-                                          No files found for this pass.
-                                        </p>
-                                      )}
+                                      </div>
                                     </div>
-                                  );
-                                })()}
-                              </div>
-                            </div>
-                          </td>
-                        </tr>
-                      )}
-                    </React.Fragment>
-                  ))}
+                                  </td>
+                                </tr>
+                              )}
+                            </React.Fragment>
+                          );
+                        })}
+                      </React.Fragment>
+                    );
+                  })}
                 </tbody>
               </table>
             </div>
           </section>
-        )}
-      </main>
+          )}
+        </main>
     </div>
   );
 };
diff --git a/src/VideoModal.tsx b/src/VideoModal.tsx
index 6d98847..9580d1f 100644
--- a/src/VideoModal.tsx
+++ b/src/VideoModal.tsx
@@ -1,6 +1,5 @@
 import React, { useState, useEffect } from 'react';
 import * as VIAM from "@viamrobotics/sdk";
-import { extractCameraName } from './lib/videoUtils';
 import { createVideoStreamFromBase64 } from './lib/videoUtils';
 
 interface VideoModalProps {
