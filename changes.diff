diff --git a/src/App.tsx b/src/App.tsx
index a0fd36e..7866595 100644
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -5,36 +5,19 @@ import Cookies from "js-cookie";
 import { JsonValue } from '@viamrobotics/sdk';
 import { Pass } from './AppInterface';
 
-/*
-TODO:
-- detect if there is a sanding resource
-    - if so show a button to start sanding
-    - if not, show a warning that there is no sanding resource
-- detect if there is a video-store resource
-    - if so show request a video from the past 1 minute and show the video
-- add pagination
-
-*/
-
-const videoStoreName = "video-store-1";
-const sanderName = "sander-module";
 const sandingSummaryName = "sanding-summary";
 const sandingSummaryComponentType = "rdk:component:sensor";
 const locationIdRegex = /main\.([^.]+)\.viam\.cloud/;
 const machineNameRegex = /\/machine\/(.+?)-main\./;
 
-
-// function duration(start: string, end: string): number {
-//   return new Date(end).getTime() - new Date(start).getTime()
-// }
-
 function App() {
   const [passSummaries, setPassSummaries] = useState<Pass[]>([]);
   const [files, setFiles] = useState<VIAM.dataApi.BinaryData[]>([]);
   const [viamClient, setViamClient] = useState<VIAM.ViamClient | null>(null);
-  // const [sanderClient, setSanderClient] = useState<VIAM.GenericComponentClient | null>(null);
   const [robotClient, setRobotClient] = useState<VIAM.RobotClient | null>(null);
-  const [sanderWarning, setSanderWarning] = useState<string | null>(null); // Warning state
+  const [lastFileToken, setLastFileToken] = useState<string | undefined>(undefined);
+  const [hasMoreFiles, setHasMoreFiles] = useState(true);
+  const [isLoadingFiles, setIsLoadingFiles] = useState(false);
 
   const machineNameMatch = window.location.pathname.match(machineNameRegex);
   const machineName = machineNameMatch ? machineNameMatch[1] : null;
@@ -86,48 +69,105 @@ function App() {
       
       return prevFiles;
     });
-  }, [viamClient]);
+  }, [viamClient, machineId]);
+
+  const loadMoreFiles = useCallback(async (passToLoad?: Pass) => {
+    if (!viamClient || !hasMoreFiles || isLoadingFiles) return false;
+
+    setIsLoadingFiles(true);
+    console.log("Loading more files...");
+
+    let filter = {
+      robotId: machineId,
+    } as VIAM.dataApi.Filter;
+
+    try {
+      let keepFetching = true;
+      let loadedFiles = false;
+      let currentToken = lastFileToken;
+      const newFiles: VIAM.dataApi.BinaryData[] = [];
+
+      while (keepFetching) {
+        console.log(`Fetching page with token: ${currentToken}`);
+        const binaryData = await viamClient.dataClient.binaryDataByFilter(
+          filter,
+          50, // limit
+          VIAM.dataApi.Order.DESCENDING,
+          currentToken,
+          false,
+          false,
+          false
+        );
+
+        if (binaryData.data.length > 0) {
+          newFiles.push(...binaryData.data);
+          currentToken = binaryData.last;
+
+          if (passToLoad) {
+            const passStart = new Date(passToLoad.start);
+            const passEnd = new Date(passToLoad.end);
+            const found = binaryData.data.some(file => {
+              if (!file.metadata?.timeRequested) return false;
+              const fileTime = file.metadata.timeRequested.toDate();
+              return fileTime >= passStart && fileTime <= passEnd;
+            });
+
+            if (found) {
+              console.log("Found relevant files for the pass, stopping fetch.");
+              keepFetching = false;
+            }
+          } else {
+            keepFetching = false;
+          }
+        } else {
+          console.log("No more data from API.");
+          keepFetching = false;
+        }
+
+        if (!binaryData.last) {
+          console.log("No more pages to fetch.");
+          setHasMoreFiles(false);
+          keepFetching = false;
+        }
+      }
+
+      // Update the global state once, after the loop is complete
+      if (newFiles.length > 0) {
+        setFiles(prevFiles => [...prevFiles, ...newFiles]);
+        setLastFileToken(currentToken);
+      }
 
+      loadedFiles = true;
+      return loadedFiles;
+    } catch (error) {
+      console.error("Failed to load more files:", error);
+      return false;
+    } finally {
+      setIsLoadingFiles(false);
+    }
+  }, [viamClient, hasMoreFiles, isLoadingFiles, lastFileToken, machineId]);
 
   useEffect(() => {
     const fetchData = async () => {
       console.log("Fetching data start");
-      
-      let filter = {
-        robotId: machineId,
-      } as VIAM.dataApi.Filter;
-
-      
 
       const viamClient = await connect(apiKeyId, apiKeySecret);
-
       setViamClient(viamClient);
+
       try {
         const robotClient = await viamClient.connectToMachine({
           host: hostname, 
           id: machineId,
         });
-        setRobotClient(robotClient); // Store the robot client
+        setRobotClient(robotClient);
       } catch (error) {
         console.error('Failed to create robot client:', error);
         setRobotClient(null);
       }
-
-      // console.log("Resources:", resources);
-
-      // Check for sander module resource
-      // if (resources.find((x) => (x.type == "service" && x.subtype == "generic" && x.name == sanderName))) {
-        // const sanderClient = new VIAM.GenericComponentClient(robotClient, sanderName);
-        // setSanderClient(sanderClient);
-        // TODO: Add visual indication that sander resource is available
-      // } else {
-      //   setSanderWarning("No sanding module found on this robot");
-      //   console.warn("No sander-module resource found");
-      // }
       
       const organizations = await viamClient.appClient.listOrganizations();
       console.log("Organizations:", organizations);
-      if (organizations.length != 1) {
+      if (organizations.length !== 1) {
         console.warn("expected 1 organization, got " + organizations.length);
         return;
       }
@@ -142,7 +182,7 @@ function App() {
             organization_id: orgID,
             location_id: locationId,
             component_name: sandingSummaryName,
-            robot_id: machineId, // Filter by current robot
+            robot_id: machineId,
             component_type: sandingSummaryComponentType
           },
         },
@@ -152,7 +192,7 @@ function App() {
           },
         },
         {
-          $limit: 100 // Get last 100 passes
+          $limit: 100
         }
       ];
 
@@ -161,10 +201,8 @@ function App() {
 
       // Process tabular data into pass summaries
       const processedPasses: Pass[] = tabularData.map((item: any) => {
-        // The actual data is nested in data.readings
         const pass = item.data!.readings!;
         
-
         return {
           start: new Date(pass.start),
           end: new Date(pass.end),
@@ -173,66 +211,31 @@ function App() {
             start: new Date(x.start),
             end: new Date(x.end),
             pass_id: pass.pass_id,
-            // duration_ms: duration(x.start, x.end),
           })): [],
           success: pass.success ?? true,
           pass_id: pass.pass_id,
-          // duration_ms: duration(pass.start, pass.end),
-          err_string: pass.err_string  || null
+          err_string: pass.err_string || null
         };
       });
 
-
       setPassSummaries(processedPasses);
-
-      let allFiles = [];
-      let last = undefined;
-      const earliestPassTime = new Date(Math.min(...processedPasses.map(p => p.start.getTime())));
-
-      var i = 0
-      while (true) {
-        console.log("Fetching files files", i);
-        const binaryData = await viamClient.dataClient.binaryDataByFilter(
-          filter,
-          50, // limit
-          VIAM.dataApi.Order.DESCENDING,
-          last, // pagination token
-          false,
-          false,
-          false
-        );
-        
-        allFiles.push(...binaryData.data);
-        
-        // Check if we've reached the earliest pass time or no more data
-        const oldestFileTime = binaryData.data[binaryData.data.length - 1]?.metadata?.timeRequested?.toDate();
-        if (!binaryData.last || !oldestFileTime || oldestFileTime < earliestPassTime) {
-          break;
-        }
-        last = binaryData.last;
-      }
-      
-      setFiles(allFiles);
-      // console.log("Fetched video files:", binaryData.data);
       console.log("Fetching data end");
     };
     
     fetchData();
-  }, []);
+  }, [apiKeyId, apiKeySecret, hostname, machineId, locationId]);
 
   return (
     <AppInterface 
-
-
       machineName={machineName}
-
       viamClient={viamClient!}
-      passSummaries={passSummaries} // Pass the actual summaries
+      passSummaries={passSummaries}
       files={files}
       robotClient={robotClient}
-      // sanderClient={null}
-      // sanderWarning={sanderWarning} // Pass the sanding warning
       fetchVideos={fetchVideos}
+      loadMoreFiles={loadMoreFiles}
+      hasMoreFiles={hasMoreFiles}
+      isLoadingFiles={isLoadingFiles}
     />
   );
 }
diff --git a/src/AppInterface.tsx b/src/AppInterface.tsx
index 37e6a10..3042775 100644
--- a/src/AppInterface.tsx
+++ b/src/AppInterface.tsx
@@ -11,20 +11,19 @@ interface AppViewProps {
   passSummaries?: any[];
   files: VIAM.dataApi.BinaryData[];
   viamClient: VIAM.ViamClient;
-
-
-  // sanderClient: VIAM.GenericComponentClient | null;
   robotClient?: VIAM.RobotClient | null;
-  // sanderWarning?: string | null;
   fetchVideos: () => Promise<void>;
   machineName: string | null;
+  loadMoreFiles: (passToLoad?: Pass) => Promise<boolean | void>;
+  hasMoreFiles: boolean;
+  isLoadingFiles: boolean;
 }
+
 export interface Step {
   name: string;
   start: Date;
   end: Date;
   pass_id: string;
-  // duration_ms?: number;
 }
 
 export interface Pass {
@@ -36,53 +35,51 @@ export interface Pass {
   err_string?: string | null;
 }
 
-
-
 const AppInterface: React.FC<AppViewProps> = ({ 
-
   machineName,
   viamClient,
   passSummaries = [],
-  files: files, 
-  // sanderClient, 
+  files, 
   robotClient,
-  // sanderWarning
-
   fetchVideos,
+  loadMoreFiles,
+  hasMoreFiles,
+  isLoadingFiles,
 }) => {
   const [activeRoute, setActiveRoute] = useState('live');
   const [expandedRows, setExpandedRows] = useState<Set<number>>(new Set());
   const [downloadingFiles, setDownloadingFiles] = useState<Set<string>>(new Set());
   const [videoStoreClient, setVideoStoreClient] = useState<VIAM.GenericComponentClient | null>(null);
+  const [isInitialFileLoad, setIsInitialFileLoad] = useState(false);
 
   // Filter files to only include video files (.mp4)
   const videoFiles = files.filter((file: VIAM.dataApi.BinaryData) => 
     file.metadata?.fileName?.toLowerCase().endsWith('.mp4')
   );
 
-  const filesByID = files.reduce((acc: any, file: VIAM.dataApi.BinaryData) => {
-    acc[file.metadata!.binaryDataId] = file;
-    return acc;
-  }, {});
-
-  // const expectedSteps = [
-  //   "Imaging",
-  //   "GeneratingLobes", 
-  //   "GeneratingWaypoints",
-  //   "Executing"
-  // ];
-
   const activeTabStyle = "bg-blue-600 text-white";
   const inactiveTabStyle = "bg-gray-200 text-gray-700 hover:bg-gray-300";
 
-  const toggleRowExpansion = (index: number) => {
+  const toggleRowExpansion = async (index: number) => {
     const newExpandedRows = new Set(expandedRows);
-    if (newExpandedRows.has(index)) {
-      newExpandedRows.delete(index);
-    } else {
+    const isExpanding = !newExpandedRows.has(index);
+    const pass = passSummaries[index];
+
+    if (isExpanding) {
       newExpandedRows.add(index);
+      setExpandedRows(newExpandedRows); // Expand row immediately
+
+      // If we are expanding a row, trigger a fetch for that pass's files.
+      if (hasMoreFiles) {
+        // Set local loading state immediately for instant UI feedback
+        setIsInitialFileLoad(true);
+        await loadMoreFiles(pass);
+        setIsInitialFileLoad(false);
+      }
+    } else {
+      newExpandedRows.delete(index);
+      setExpandedRows(newExpandedRows);
     }
-    setExpandedRows(newExpandedRows);
   };
 
   const getStepVideos = (step: Step) => {
@@ -174,12 +171,6 @@ const AppInterface: React.FC<AppViewProps> = ({
             >
               Pass summary
             </button>
-            {/* <button
-              onClick={() => setActiveRoute('past')}
-              className={`${activeRoute === 'past' ? activeTabStyle : inactiveTabStyle} h-9 sm:h-10 px-4 rounded`}
-            >
-              Robot operator
-            </button> */}
           </div>
         </div>
 
@@ -187,173 +178,190 @@ const AppInterface: React.FC<AppViewProps> = ({
       </header>
       
       <main className="mainContent">
-        {activeRoute === 'live' ? (
-          <>
-            <section>
-              <h2 className="text-xl font-semibold text-zinc-900 mb-4">Passes
-                {machineName ? ` for ${machineName}` : ''}
-              </h2>
-              
-              <VideoStoreSelector
-                robotClient={robotClient || null}
-                onVideoStoreSelected={setVideoStoreClient}
-              />
-              
-              <div className="viam-table-container">
-                <table className="viam-table">
-                  <thead>
-                    <tr>
-                      <th style={{ width: '20px' }}></th>
-                      <th>Day</th>
-                      <th>Pass ID</th>
-                      <th>Status</th>
-                      <th>Start Time</th>
-                      <th>End Time</th>
-                      <th>Duration</th>
-                      <th>Steps</th>
-                      <th>Error</th>
-                    </tr>
-                  </thead>
-                  <tbody>
-                    {passSummaries.map((pass: Pass, index: number) => (
-                      <React.Fragment key={pass.pass_id || index}>
-                        <tr 
-                          className="expandable-row"
-                          onClick={() => toggleRowExpansion(index)}
-                          role="button"
-                          tabIndex={0}
-                          onKeyDown={(e) => {
-                            if (e.key === 'Enter' || e.key === ' ') {
-                              e.preventDefault();
-                              toggleRowExpansion(index);
-                            }
-                          }}
-                          aria-expanded={expandedRows.has(index)}
-                          aria-label={`${expandedRows.has(index) ? 'Collapse' : 'Expand'} details for pass from ${pass.start.toLocaleTimeString()}`}
-                        >
-                          <td>
-                            <span className={`expand-icon ${expandedRows.has(index) ? 'expanded' : ''}`} aria-hidden="true">
-                              ▶
+        {activeRoute === 'live' && (
+          <section>
+            <h2 className="text-xl font-semibold text-zinc-900 mb-4">Passes
+              {machineName ? ` for ${machineName}` : ''}
+            </h2>
+            
+            <VideoStoreSelector
+              robotClient={robotClient || null}
+              onVideoStoreSelected={setVideoStoreClient}
+            />
+            
+            <div className="viam-table-container">
+              <table className="viam-table">
+                <thead>
+                  <tr>
+                    <th style={{ width: '20px' }}></th>
+                    <th>Day</th>
+                    <th>Pass ID</th>
+                    <th>Status</th>
+                    <th>Start Time</th>
+                    <th>End Time</th>
+                    <th>Duration</th>
+                    <th>Steps</th>
+                    <th>Error</th>
+                  </tr>
+                </thead>
+                <tbody>
+                  {passSummaries.map((pass: Pass, index: number) => (
+                    <React.Fragment key={pass.pass_id || index}>
+                      <tr 
+                        className="expandable-row"
+                        onClick={() => toggleRowExpansion(index)}
+                        role="button"
+                        tabIndex={0}
+                        onKeyDown={(e) => {
+                          if (e.key === 'Enter' || e.key === ' ') {
+                            e.preventDefault();
+                            toggleRowExpansion(index);
+                          }
+                        }}
+                        aria-expanded={expandedRows.has(index)}
+                        aria-label={`${expandedRows.has(index) ? 'Collapse' : 'Expand'} details for pass from ${pass.start.toLocaleTimeString()}`}
+                      >
+                        <td>
+                          <span className={`expand-icon ${expandedRows.has(index) ? 'expanded' : ''}`} aria-hidden="true">
+                            ▶
+                          </span>
+                        </td>
+                        <td className="text-zinc-700">{pass.start.toLocaleDateString()}</td>
+                        <td className="text-zinc-700 text-xs">
+                          {pass.pass_id ? (
+                            <button
+                              onClick={() => navigator.clipboard.writeText(pass.pass_id)}
+                              className="hover:bg-blue-100 hover:text-blue-700 px-1 py-0.5 rounded cursor-pointer transition-colors"
+                              title={`Click to copy full pass ID: ${pass.pass_id}`}
+                            >
+                              {pass.pass_id.substring(0, 8)}
+                            </button>
+                          ) : (
+                            '—'
+                          )}
+                        </td>
+                        <td>{getStatusBadge(pass.success)}</td>
+                        <td className="text-zinc-700">{pass.start.toLocaleTimeString()}</td>
+                        <td className="text-zinc-700">{pass.end.toLocaleTimeString()}</td>
+                        <td className="text-zinc-700">{formatDurationToMinutesSeconds(pass.start, pass.end)}</td>
+                        <td className="text-zinc-700">
+                          {pass.steps ? `${pass.steps.length} steps` : '—'}
+                        </td>
+                        <td className="text-zinc-700">
+                          {pass.err_string ? (
+                            <span className="text-red-600 text-xxs font-mono error-text" title={pass.err_string}>
+                              {pass.err_string}
                             </span>
-                          </td>
-                          <td className="text-zinc-700">{pass.start.toLocaleDateString()}</td>
-                          <td className="text-zinc-700 text-xs">
-                            {pass.pass_id ? (
-                              <button
-                                onClick={() => navigator.clipboard.writeText(pass.pass_id)}
-                                className="hover:bg-blue-100 hover:text-blue-700 px-1 py-0.5 rounded cursor-pointer transition-colors"
-                                title={`Click to copy full pass ID: ${pass.pass_id}`}
-                              >
-                                {pass.pass_id.substring(0, 8)}
-                              </button>
-                            ) : (
-                              '—'
-                            )}
-                          </td>
-                          <td>{getStatusBadge(pass.success)}</td>
-                          <td className="text-zinc-700">{pass.start.toLocaleTimeString()}</td>
-                          <td className="text-zinc-700">{pass.end.toLocaleTimeString()}</td>
-                          <td className="text-zinc-700">{formatDurationToMinutesSeconds(pass.start, pass.end)}</td>
-                          <td className="text-zinc-700">
-                            {pass.steps ? `${pass.steps.length} steps` : '—'}
-                          </td>
-                          <td className="text-zinc-700">
-                            {pass.err_string ? (
-                              <span className="text-red-600 text-xxs font-mono error-text" title={pass.err_string}>
-                                {pass.err_string}
-                              </span>
-                            ) : (
-                              <span className="text-gray-600">—</span>
-                            )}
-                          </td>
-                        </tr>
-                        {expandedRows.has(index) && (
-                          <tr className="expanded-content">
-                            <td colSpan={9}>
-                              <div className="pass-details">
-                                <div className="passes-container">
-                                  <div className="steps-grid">
-                                    {pass.steps.map((step: Step) => {
-                                        const stepVideos = getStepVideos(step);
+                          ) : (
+                            <span className="text-gray-600">—</span>
+                          )}
+                        </td>
+                      </tr>
+                      {expandedRows.has(index) && (
+                        <tr className="expanded-content">
+                          <td colSpan={9}>
+                            <div className="pass-details">
+                              <div className="passes-container">
+                                <div className="steps-grid">
+                                  {pass.steps.map((step: Step) => {
+                                      const stepVideos = getStepVideos(step);
 
-                                        return (
-                                          <div key={step.name} className="step-card">
-                                            <div className="step-name">{step.name}</div>
-                                            <div className="step-timeline">
-                                              <div className="step-time">
-                                                <span className="time-label">Start</span>
-                                                <span className="time-value">{step.start.toLocaleTimeString()}</span>
-                                              </div>
-                                              <div className="timeline-arrow">→</div>
-                                              <div className="step-time">
-                                                <span className="time-label">End</span>
-                                                <span className="time-value">{step.end.toLocaleTimeString()}</span>
-                                              </div>
+                                      return (
+                                        <div key={step.name} className="step-card">
+                                          <div className="step-name">{step.name}</div>
+                                          <div className="step-timeline">
+                                            <div className="step-time">
+                                              <span className="time-label">Start</span>
+                                              <span className="time-value">{step.start.toLocaleTimeString()}</span>
+                                            </div>
+                                            <div className="timeline-arrow">→</div>
+                                            <div className="step-time">
+                                              <span className="time-label">End</span>
+                                              <span className="time-value">{step.end.toLocaleTimeString()}</span>
                                             </div>
-                                            <div className="step-duration">{formatDurationToMinutesSeconds(step.start, step.end)}</div>
-                                            
-                                            <StepVideosGrid
-                                              step={step}
-                                              stepVideos={stepVideos}
-                                              videoStoreClient={videoStoreClient}
-                                              viamClient={viamClient}
-                                              fetchVideos={fetchVideos}
-
-                                            />
                                           </div>
-                                        );
-                                    })}
-                                  </div>
-                                
-                                  {/* New section for all files in pass time range */}
-                                  {(() => {
-                                    const passStart = new Date(pass.start);
-                                    const passEnd = new Date(pass.end);
-                                    
-                                    // Always include files that fall within the pass time range (this includes .pcd files)
-                                    const passTimeRangeFileIDS = files.filter((file: VIAM.dataApi.BinaryData) => {
-                                      if (!file.metadata?.timeRequested) return false;
-                                      const fileTime = file.metadata.timeRequested.toDate();
-                                      return fileTime >= passStart && fileTime <= passEnd;
-                                    }).map((x)=> x.metadata!.binaryDataId);
-                                    
+                                          <div className="step-duration">{formatDurationToMinutesSeconds(step.start, step.end)}</div>
+                                          
+                                          <StepVideosGrid
+                                            step={step}
+                                            stepVideos={stepVideos}
+                                            videoStoreClient={videoStoreClient}
+                                            viamClient={viamClient}
+                                            fetchVideos={fetchVideos}
+                                          />
+                                        </div>
+                                      );
+                                  })}
+                                </div>
+                              
+                                {/* New section for all files in pass time range */}
+                                {(() => {
+                                  const passStart = new Date(pass.start);
+                                  const passEnd = new Date(pass.end);
+                                  
+                                  // Always include files that fall within the pass time range (this includes .pcd files)
+                                  const passTimeRangeFileIDS = files.filter((file: VIAM.dataApi.BinaryData) => {
+                                    if (!file.metadata?.timeRequested) return false;
+                                    const fileTime = file.metadata.timeRequested.toDate();
+                                    return fileTime >= passStart && fileTime <= passEnd;
+                                  }).map((x)=> x.metadata!.binaryDataId);
+                                  
 
-                                    // Additionally include pass-specific files if pass_id is not blank
-                                    const passFileIDs: string[] = pass.pass_id && pass.pass_id.trim() !== '' 
-                                      ? files.filter((x)=> x.metadata!.fileName?.split("/").filter((y) => y == pass.pass_id).length > 0).map((x)=> x.metadata!.binaryDataId)
-                                      : [];
-                                    
+                                  // Additionally include pass-specific files if pass_id is not blank
+                                  const passFileIDs: string[] = pass.pass_id && pass.pass_id.trim() !== '' 
+                                    ? files.filter((x)=> x.metadata!.fileName?.split("/").filter((y) => y == pass.pass_id).length > 0).map((x)=> x.metadata!.binaryDataId)
+                                    : [];
+                                  
 
-                                    const ids = new Set([...passFileIDs, ...passTimeRangeFileIDS]);
-                                    const passFiles  = files.filter((x)=> ids.has(x.metadata!.binaryDataId)).sort((a, b) => {
-                                      const timeA = a.metadata!.timeRequested!.toDate().getTime();
-                                      const timeB = b.metadata!.timeRequested!.toDate().getTime();
-                                      return timeA - timeB;
-                                    })
+                                  const ids = new Set([...passFileIDs, ...passTimeRangeFileIDS]);
+                                  const passFiles  = files.filter((x)=> ids.has(x.metadata!.binaryDataId)).sort((a, b) => {
+                                    const timeA = a.metadata!.timeRequested!.toDate().getTime();
+                                    const timeB = b.metadata!.timeRequested!.toDate().getTime();
+                                    return timeA - timeB;
+                                  })
 
-                                    // Only render the section if there are files
-                                    if (passFiles.length === 0) {
-                                      return <div className="pass-files-section">
-                                        <h4>
-                                          Files captured during this pass
-                                        </h4>
-                                        <p>
-                                          No files found
-                                        </p>
-                                        </div>
-                                    }
-                                    
+                                  // Determine if we are in a loading state.
+                                  const isLoading = isLoadingFiles || isInitialFileLoad;
+
+                                  // Show a loading indicator inside the expanded row while fetching files for this pass.
+                                  if (isLoading && passFiles.length === 0) {
                                     return (
-                                      <div className="pass-files-section">
-                                        <h4>
-                                          Files captured during this pass
-                                        </h4>
-                                        
+                                      <div className="pass-files-section" style={{
+                                        display: 'flex',
+                                        flexDirection: 'column',
+                                        alignItems: 'center',
+                                        justifyContent: 'center',
+                                        padding: '20px',
+                                        minHeight: '100px',
+                                      }}>
+                                        <span style={{ 
+                                          display: 'inline-block',
+                                          width: '28px',
+                                          height: '28px',
+                                          border: '3px solid rgba(59, 130, 246, 0.2)',
+                                          borderTopColor: '#3b82f6',
+                                          borderRadius: '50%',
+                                          animation: 'spin 1s linear infinite'
+                                        }}></span>
+                                        <p style={{ marginTop: '12px', color: '#6b7280', fontSize: '14px' }}>
+                                          Loading files...
+                                        </p>
+                                      </div>
+                                    );
+                                  }
+
+                                  return (
+                                    <div className="pass-files-section">
+                                      <h4>
+                                        Files captured during this pass
+                                      </h4>
+                                      
+                                      {passFiles.length > 0 && (
                                         <div style={{ 
                                           display: 'flex',
                                           flexWrap: 'wrap',
                                           gap: '8px',
-                                          maxHeight: '400px',
+                                          maxHeight: '200px',
                                           overflowY: 'auto',
                                           padding: '4px'
                                         }}>
@@ -465,45 +473,54 @@ const AppInterface: React.FC<AppViewProps> = ({
                                             );
                                           })}
                                         </div>
-                                      </div>
-                                    );
-                                  })()}
-                                </div>
+                                      )}
+                                      
+                                      {/* Show message if no files are found in the current view */}
+                                      {passFiles.length === 0 && !isLoading && (
+                                        <p>
+                                          {hasMoreFiles ? 'No relevant files found in the current batch.' : 'No files found for this pass.'}
+                                        </p>
+                                      )}
+
+                                      {/* Show the "Load More" button if there are more files to fetch and none were found for this pass */}
+                                      {hasMoreFiles && passFiles.length === 0 && !isLoading && (
+                                        <div style={{ textAlign: 'center', marginTop: '16px' }}>
+                                          <button
+                                            onClick={(e) => {
+                                              e.stopPropagation();
+                                              loadMoreFiles(pass);
+                                            }}
+                                            disabled={isLoadingFiles}
+                                            style={{
+                                              padding: '8px 16px',
+                                              backgroundColor: isLoadingFiles ? '#9ca3af' : '#3b82f6',
+                                              color: 'white',
+                                              borderRadius: '6px',
+                                              cursor: isLoadingFiles ? 'not-allowed' : 'pointer',
+                                              border: 'none',
+                                              fontSize: '14px',
+                                            }}
+                                          >
+                                            {isLoadingFiles ? 'Loading...' : 'Load More Files'}
+                                          </button>
+                                        </div>
+                                      )}
+                                    </div>
+                                  );
+                                })()}
                               </div>
-                            </td>
-                          </tr>
-                        )}
-                      </React.Fragment>
-                    ))}
-                  </tbody>
-                </table>
-              </div>
-            </section>
-          </>
-        ) : (
-          null
-          // <section>
-          //   {/* Add warning banner here, only in Robot Operator tab */}
-          //   {sanderWarning && (
-          //     <div className="warning-banner" style={{
-          //       backgroundColor: '#FEF3C7',
-          //       color: '#92400E',
-          //       padding: '12px 16px',
-          //       borderRadius: '8px',
-          //       display: 'flex',
-          //       alignItems: 'center',
-          //       gap: '8px',
-          //       marginBottom: '16px'
-          //     }}>
-          //       <span>⚠️</span>
-          //       <span>{sanderWarning}</span>
-          //     </div>
-          //   )}
-          //   <RobotOperator sanderClient={sanderClient} robotClient={robotClient} />
-          // </section>
+                            </div>
+                          </td>
+                        </tr>
+                      )}
+                    </React.Fragment>
+                  ))}
+                </tbody>
+              </table>
+            </div>
+          </section>
         )}
       </main>
-      
     </div>
   );
 };
